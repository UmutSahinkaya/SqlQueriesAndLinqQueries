main()
{
List<Category> categories =new List<Category>{
new Category{CategoryId=1, CategoryName="Bilgisayar"},
new Category{CategoryId=2, CategoryName="Telefon"}
};
List<Product> products=new List<Product>{
new Product{ProductId=1,CategoryId=1,ProductName="Acer Laptop",QuantityPerUnit="32 GB Ram",UnitPrice=10000,UnitInStock=5},
new Product{ProductId=2,CategoryId=1,ProductName="Asus Laptop",QuantityPerUnit="16 GB Ram",UnitPrice=18000,UnitInStock=3},
new Product{ProductId=3,CategoryId=1,ProductName="Hp Laptop",QuantityPerUnit="8 GB Ram",UnitPrice=18000,UnitInStock=2},
new Product{ProductId=4,CategoryId=2,ProductName="Samsung Telefon",QuantityPerUnit="4 GB Ram",UnitPrice=5000,UnitInStock=15},
new Product{ProductId=5,CategoryId=2,ProductName="Apple Telefon",QuantityPerUnit="4 GB Ram",UnitPrice=4000,UnitInStock=0}
};


//Any ile bir listenin içinde eleman varmı yok mu diye sorgulama yaparız!(True/False Döndürür.)
var result = products.Any(p=>p.ProductName=="Acer Laptop");
Console.WriteLine(result);
************************************************************************************
//Find Dönüş olarak bir tane product döndürüyor .
var result= products.Find(p=>p.ProductId==product.ProductId);
************************************************************************************
//FindAll Şarta uyan bütün  elemanları getirir. Direkt olarak liste dönüor fakat Where kullanımında .ToList dememiz gerekiyor.
var result = products.FindAll(p=>p.ProductName.Contains("top"));
************************************************************************************
//Where FindAll gibi çalışır Liste gönderir.
var result= products.Where(p=>p.ProductName.Contains("top")).OrderByDescending(p=>p.UnitPric) OR.OrderBy(p=>p.UnitPrice).thenByDescending(p=>p.ProductName);
foreach(var product in result)
{
Console.WriteLine(product.ProductName)
}
************************************************************************************
//Yukarıdakiler Single Line Query
var result= from p in products
			Where p..UnitPrice>6000
			orderby p.UnitPrice descending, p.ProductName ascending
			select p;
			// class oluşturup sadece istediğimiz field ları da çağıra biliriz
			select new ProductDto{ProductId=p.ProductId , ProductName=p.ProductName , UnitPrice=p.UnitPrice }
foreach(var product in result)
{
	Console.WriteLine(product.ProductName)
}

************************************************************************************
var result=from p in products
		   join c in categories
		   on p.CategoryId equals c.CategoryId
		   where p.UnitPrice>5000
		   orderby p.UnitPrice descending
		   select new ProductDto{ProductId=p.ProductId,CategoryName=c.CategoryName,ProductName=p.ProductName,UnitPrice=p.UnitPrice};
	foreach(var productDto in result)
	{
		Console.WriteLine("{0} ------- {1}" , productDto.ProductName , productDto.CategoryName);
	}	   

}
class ProductDto
{
	public int ProductId  {get; set;}
	public string ProductName  {get; set;}
	public decimal UnitPrice  {get; set;}
}